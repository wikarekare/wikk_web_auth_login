#!/usr/local/bin/ruby
require 'cgi'
require 'wikk_configuration'
require 'wikk_web_auth'

cgi = CGI.new('html5')

begin
  load '/usr/local/wikk/etc/wikk.conf' # Pull in config constants for Wikarekare.
  password_conf = WIKK::Configuration.new(WIKK_PASSWORD_CONF)

  return_url = CGI.escapeHTML(cgi['ReturnURL']) # We go here if we are authenticated
  action = CGI.escapeHTML(cgi['action']) # We perform this action ['test','logout','login']. No action == login

  # will either generate a login page
  # Or no page, if we are already authenticated.

  if action == 'test' # Test is asking for json true/false response.
    cgi.out('type' => 'application/json') do
      "{ \"returnCode\": \"#{WIKK::Web_Auth.authenticated?(cgi) ? 'true' : 'false'}\" }\n"
    end
  else # We are wanting to login or logout.

    auth = WIKK::Web_Auth.new(cgi, password_conf, return_url) # Create a new athentication record.

    # If we are authenticated, then decide if we want a fast return,
    # Or offer a logout.

    if auth.authenticated? # Otherwise the login form is generated by the wikk_web_auth gem.
      if action == 'logout' # Then logout, which will also generate a login form.
        auth.logout
        auth.gen_html_login_page(return_url)
      else # This is a successful login, so redirect.
        cgi.header('type' => 'text/html')
        cgi.out do
          cgi.html do
            cgi.head { cgi.title { 'login' } + auth.html_reload(return_url) } +
              cgi.body do
                "Welcome #{auth.user}<br>\n" +
                  auth.html_logout_form(CGI_DIR)
              end
          end
        end
      end
    end
  end
rescue Exception => e # rubocop:disable Lint/RescueException In a CGI we want to handle all exceptions.
  cgi.header('type' => 'text/html')
  cgi.out do
    cgi.html do
      cgi.head { cgi.title { 'login' } } +
        cgi.body { "Error #{e.message}<br>\n" }
    end
  end
end
